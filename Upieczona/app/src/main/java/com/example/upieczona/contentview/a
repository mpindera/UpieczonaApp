package com.example.upieczona.contentview


import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.text.HtmlCompat
import androidx.navigation.NavHostController
import coil.compose.AsyncImage
import coil.compose.AsyncImagePainter
import coil.compose.rememberAsyncImagePainter
import coil.request.ImageRequest
import com.example.upieczona.destination.Destination
import com.example.upieczona.dtoposts.PostsOfUpieczonaItemDto
import com.example.upieczona.mainscreen.MainPageState
import com.example.upieczona.staticobjects.ApiUtils
import com.example.upieczona.staticobjects.MaterialsUtils
import com.example.upieczona.topappbar.TopAppBarUpieczona
import com.example.upieczona.viewmodels.UpieczonaViewModel
import com.google.android.engage.common.datamodel.Image


@Composable
fun ContentViewUpieczona(
    postIndex: Int?,
    upieczonaViewModel: UpieczonaViewModel,
    navController: NavHostController
) {
    val postDetails = upieczonaViewModel.allPosts

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {

        FetchDetails(upieczonaViewModel = upieczonaViewModel, postIndex = postIndex)
        LazyColumn {
            items(postDetails.value.size) { index ->
                val decodedText = HtmlCompat.fromHtml(
                    postDetails.value[index].title.rendered, HtmlCompat.FROM_HTML_MODE_LEGACY
                ).toString()

                if (postDetails.value[index].id == postIndex) {
                    TopAppBarUpieczona {
                        navController.navigate(Destination.MainPageOfUpieczona.route)
                    }
                    Divider()
                    Box {
                        val imageUrl =
                            postDetails.value[index].yoastHeadJson.ogImage?.getOrNull(0)?.url
                        val twitterImageUrl = postDetails.value[index].yoastHeadJson.twitterImage
                        val selectedImageUrl = imageUrl ?: twitterImageUrl

                        AsyncImage(
                            model = selectedImageUrl,
                            contentDescription = null,
                            modifier = Modifier.background(Color.White)
                        )
                    }
                    Divider()
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(top = 15.dp),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        Text(
                            fontFamily = MaterialTheme.typography.headlineLarge.fontFamily,
                            text = decodedText,
                            fontSize = 25.sp,
                            textAlign = TextAlign.Center
                        )

                    }
                }
            }
        }
    }
}

@Composable
fun FetchDetails(upieczonaViewModel: UpieczonaViewModel, postIndex: Int?) {
    LaunchedEffect(postIndex) {
        if (postIndex != null) {
            upieczonaViewModel.fetchPostById(postIndex)
        }
    }
}